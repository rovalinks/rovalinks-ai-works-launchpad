name: Handle New Subscriber

permissions:
  contents: write

on:
  repository_dispatch:
    types: [new_subscriber]
  workflow_dispatch:
    inputs:
      email:
        description: 'Subscriber email'
        required: true
        type: string

jobs:
  add-subscriber:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set EMAIL variable
        run: |
          if [ -n "${{ github.event.client_payload.email }}" ]; then
            echo "EMAIL_VAL=${{ github.event.client_payload.email }}" >> $GITHUB_ENV
          else
            echo "EMAIL_VAL=${{ github.event.inputs.email }}" >> $GITHUB_ENV
          fi

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: pip install pandas requests

      - name: Check & Update Subscriber List
        id: check_sub
        run: |
          python <<EOF
          import os, pandas as pd
          from datetime import datetime

          email = os.getenv("EMAIL_VAL")
          os.makedirs("subscribers", exist_ok=True)
          filepath = "subscribers/users.csv"
          df = pd.read_csv(filepath) if os.path.exists(filepath) else pd.DataFrame(columns=["email", "timestamp"])

          if email in df["email"].values:
              status = "exists"
          else:
              df.loc[len(df)] = [email, datetime.utcnow().isoformat()]
              df.to_csv(filepath, index=False)
              status = "new"

          with open("subscribers/state.txt", "w") as f:
              f.write(status)
          EOF

      - name: Commit if new subscriber
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add subscribers/users.csv
          git commit -m "Updated subscribers list" || echo "No changes to commit"
          git push

      - name: Set subscription state
        run: echo "SUB_STATE=$(cat subscribers/state.txt)" >> $GITHUB_ENV

      - name: Send email via ZeptoMail
        env:
          EMAIL: ${{ env.EMAIL_VAL }}
          SUB_STATE: ${{ env.SUB_STATE }}
          Z_API_TOKEN: ${{ secrets.ZEPTOMAIL_API_TOKEN }}
        run: |
          python <<EOF
          import os, json, requests, re, sys

          user_email = os.getenv("EMAIL")
          sub_state = os.getenv("SUB_STATE")
          token = os.getenv("Z_API_TOKEN")
          from_email = "noreply@rovalinks.com"
          admin_email = "hr@rovalinks.com"

          def is_valid_email(email):
              return re.match(r"[^@]+@[^@]+\.[^@]+", email)

          if not is_valid_email(user_email):
              print(f"Invalid email: {user_email}")
              sys.exit(1)

          subject = "üéâ Welcome to Rovalinks AI Works!" if sub_state == "new" else "You're already subscribed!"
          html = f'''
          <html>
          <body style="font-family: 'Segoe UI', sans-serif; background-color: #f4f6f8; padding: 0; margin: 0;">
            <div style="max-width: 600px; margin: 40px auto; background: #fff; border-radius: 8px; padding: 30px; box-shadow: 0 4px 12px rgba(0,0,0,0.1);">
              <h1 style="color: #5A67D8;">{subject}</h1>
              <p>Hi there,</p>
              <p>{"Thank you for signing up for updates from <strong>Rovalinks AI Works</strong>!" if sub_state == "new" else "You're already on our subscriber list."}</p>
              <p>{"You‚Äôll get first access to new features, product launches, and updates." if sub_state == "new" else "Stay tuned for early access, launches, and more AI news."}</p>
              <p style="margin-top: 20px; font-size: 14px; background: #f0f1f5; padding: 10px; border-left: 4px solid #805AD5;">
                üì¨ Check your spam/promotions folder and mark us as \"Not Spam\".
              </p>
              <a href="https://rovalinks.com" style="display: inline-block; margin-top: 20px; background: #5A67D8; color: #fff; padding: 12px 24px; border-radius: 6px; text-decoration: none; font-weight: bold;">Visit Our Website</a>
              <p style="margin-top: 30px;">üöÄ Let's shape the future of AI ‚Äî together.</p>
              <p>‚Äì The Rovalinks Team</p>
              <div style="margin-top: 30px; font-size: 12px; color: #aaa;">¬© 2025 Rovalinks AI Works. All rights reserved.</div>
            </div>
          </body>
          </html>
          '''

          to_list = [
              {"email_address": {"address": user_email}},
          ]
          if sub_state == "new":
              to_list.append({"email_address": {"address": admin_email, "name": "Rovalinks HR"}})

          payload = {
              "from": {
                  "address": from_email,
                  "name": "Rovalinks AI"
              },
              "to": to_list,
              "subject": subject,
              "htmlbody": html
          }

          headers = {
              "accept": "application/json",
              "content-type": "application/json",
              "authorization": f"Zoho-enczapikey {token}"
          }

          print("üì§ Sending email to ZeptoMail...")
          print(json.dumps(payload, indent=2))

          try:
              response = requests.post("https://api.zeptomail.in/v1.1/email", headers=headers, json=payload)
              print("‚úÖ Status:", response.status_code)
              print("üßæ Response:", response.text)
              response.raise_for_status()
          except Exception as e:
              print("‚ùå Error sending email:", str(e))
              sys.exit(1)
          EOF

      - name: Clean up
        run: rm -f subscribers/state.txt
