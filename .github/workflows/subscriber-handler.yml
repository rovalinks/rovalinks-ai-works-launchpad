name: Handle New Subscriber

permissions:
  contents: write

on:
  repository_dispatch:
    types: [new_subscriber]
  workflow_dispatch:
    inputs:
      email:
        description: 'Subscriber email'
        required: true
        type: string

jobs:
  add-subscriber:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: true

      - name: Debug email input
        run: |
          echo "Repo Dispatch Email: ${{ github.event.client_payload.email }}"
          echo "Manual Email: ${{ github.event.inputs.email }}"

      - name: Set EMAIL variable
        run: |
          echo "EMAIL_VAL=${{ github.event.client_payload.email || github.event.inputs.email }}" >> $GITHUB_ENV

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          pip install pandas requests

      - name: Check & Update Subscriber List
        id: check_sub
        run: |
          python <<EOF
          import os, pandas as pd
          from datetime import datetime

          email = os.getenv("EMAIL_VAL")
          os.makedirs("subscribers", exist_ok=True)
          filepath = "subscribers/users.csv"
          df = pd.read_csv(filepath) if os.path.exists(filepath) else pd.DataFrame(columns=["email", "timestamp"])

          if email in df["email"].values:
              status = "exists"
          else:
              df.loc[len(df)] = [email, datetime.utcnow().isoformat()]
              df.to_csv(filepath, index=False)
              status = "new"

          with open("subscribers/state.txt", "w") as f:
              f.write(status)
          EOF

      - name: Commit if new subscriber
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add subscribers/users.csv
          git commit -m "Updated subscribers list" || echo "No changes to commit"
          git push

      - name: Set subscription state
        run: echo "SUB_STATE=$(cat subscribers/state.txt)" >> $GITHUB_ENV

- name: Send email via ZeptoMail
  env:
    EMAIL: ${{ env.EMAIL_VAL }}
    SUB_STATE: ${{ env.SUB_STATE }}
    Z_API_TOKEN: ${{ secrets.ZEPTOMAIL_API_TOKEN }}
  run: |
    python <<EOF
    import os, json, requests

    user_email = os.environ["EMAIL"]
    sub_state = os.environ["SUB_STATE"]
    token = os.environ["Z_API_TOKEN"]

    from_email = "noreply@rovalinks.com"
    admin_email = "hr@rovalinks.com"

    if sub_state == "new":
        subject = "ðŸŽ‰ Welcome to Rovalinks AI Works!"
        html = """\
        <div style='font-family: sans-serif'>
          <h1>ðŸŽ‰ Welcome!</h1>
          <p>Thanks for joining Rovalinks AI Works.</p>
        </div>
        """
    else:
        subject = "You're already subscribed!"
        html = """\
        <div style='font-family: sans-serif'>
          <h2>ðŸ‘‹ Already Subscribed</h2>
          <p>No worries â€” you're on our list.</p>
        </div>
        """

    to_list = list(filter(None, [
        { "email_address": { "address": user_email } },
        { "email_address": { "address": admin_email } } if sub_state == "new" else None
    ]))

    payload = {
      "from": { "address": from_email },
      "to": to_list,
      "subject": subject,
      "htmlbody": html
    }

    headers = {
      "accept": "application/json",
      "content-type": "application/json",
      "authorization": f"Zoho-enczapikey {token}"
    }

    response = requests.post("https://api.zeptomail.in/v1.1/email", headers=headers, data=json.dumps(payload))

    print("=== ZeptoMail API Response ===")
    print("Status:", response.status_code)
    try:
        print("JSON:", response.json())
    except:
        print("Text:", response.text)
    response.raise_for_status()
    EOF
